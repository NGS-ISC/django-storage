# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-22 00:50
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Amplicon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descr', models.TextField(verbose_name='Description')),
                ('date', models.DateField(verbose_name='Date of analyse')),
                ('region', models.TextField(blank=True, null=True, verbose_name='Region')),
                ('chao', models.FloatField(blank=True, null=True, verbose_name='Chao1 0.03')),
                ('shannon', models.FloatField(blank=True, null=True, verbose_name='Shannon 0.03')),
                ('sraid', models.CharField(blank=True, max_length=10, null=True, verbose_name='SRAid in NCBI SRA')),
                ('lenbp', models.IntegerField(blank=True, null=True, verbose_name='length bp')),
                ('identa', models.CharField(max_length=100, verbose_name='Amplicon identifier')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Amplicon',
                'verbose_name_plural': 'Amplicons',
            },
        ),
        migrations.CreateModel(
            name='AnalysisParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Name parameter')),
                ('unit', models.CharField(max_length=14, verbose_name='Unit')),
                ('descr', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('have', models.BooleanField(default=False, help_text="Dlja bioticheskih. Esli opredelili  s pomoshh'ju krasitelja bakterii, no ne vhodili v zadachi issledovanija", verbose_name='Have?')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Analysis parameter',
                'verbose_name_plural': 'Analysis parameters',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of equipment or consumables', max_length=70, unique=True, verbose_name='Name')),
                ('error', models.TextField(blank=True, null=True, verbose_name='Pogreshnost')),
                ('desc', models.TextField(max_length=1024, verbose_name='Description')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Equipment and consumables',
                'verbose_name_plural': 'Equipment and consumables',
            },
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene', models.CharField(max_length=50, verbose_name='Gene')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Gene',
                'verbose_name_plural': 'Genes',
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Method name')),
                ('descr', models.TextField(blank=True, max_length=5110, null=True, verbose_name='Description')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Method',
                'verbose_name_plural': 'Methods',
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Organisation name')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
            },
        ),
        migrations.CreateModel(
            name='OTU',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_seq', models.TextField(verbose_name='Ref seq')),
                ('read', models.PositiveIntegerField(verbose_name='Count reads')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'OTU',
                'verbose_name_plural': "OTU's",
            },
        ),
        migrations.CreateModel(
            name='Pipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='Pipeline name')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Pipeline',
                'verbose_name_plural': 'Pipelines',
            },
        ),
        migrations.CreateModel(
            name='ProgramPipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Program name')),
                ('version', models.CharField(max_length=20, verbose_name='Program version')),
                ('os', models.CharField(help_text='Please write here full version your operation system', max_length=50, verbose_name='Operation system')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Program Pipeline',
                'verbose_name_plural': 'Programs Pipeline',
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512, verbose_name='Title')),
                ('publisher', models.CharField(max_length=200, verbose_name='Publisher')),
                ('year', models.PositiveSmallIntegerField(verbose_name='Year')),
                ('pages', models.CharField(blank=True, help_text='Stranicy publikacii', max_length=20, null=True, verbose_name='Pages')),
                ('file', models.FileField(blank=True, null=True, upload_to='files/publications/%Y/%m/%d/', verbose_name='File with paper')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Publication',
                'verbose_name_plural': 'Publications',
            },
        ),
        migrations.CreateModel(
            name='Reads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rri', models.TextField(verbose_name='Raw read id')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
                ('ampl', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Amplicon', verbose_name='Amplicon')),
                ('otiu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.OTU', verbose_name='OTU')),
            ],
            options={
                'verbose_name': 'Reads',
                'verbose_name_plural': 'Reads',
            },
        ),
        migrations.CreateModel(
            name='Researcher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fio', models.CharField(max_length=100, verbose_name='FIO')),
                ('lab', models.CharField(blank=True, max_length=250, null=True, verbose_name='Laboratory')),
                ('contacts', models.CharField(blank=True, max_length=250, null=True, verbose_name='Contact info')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Organisation', verbose_name='Organisation')),
                ('user', models.ForeignKey(blank=True, help_text='Select the user if there is a', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Researcher',
                'verbose_name_plural': 'Researchers',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Shifr proby', max_length=50, unique=True, verbose_name='Code of sample')),
                ('date_time', models.DateTimeField(verbose_name='Date and time of sampling')),
                ('depth', models.PositiveSmallIntegerField(help_text='Glubina 1', verbose_name='Depth')),
                ('depth2', models.PositiveSmallIntegerField(blank=True, help_text="Glubina 2, esli entigral'naya", null=True, verbose_name='Depth niz')),
                ('volume', models.CharField(blank=True, max_length=30, null=True, verbose_name='Sample volume')),
                ('descr', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Sample',
                'verbose_name_plural': 'Samples',
            },
        ),
        migrations.CreateModel(
            name='SampleAnalysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(help_text='Pls input result here', max_length=1024, verbose_name='Result')),
                ('file', models.FileField(blank=True, help_text='Upload file with analyses result', null=True, upload_to='files/analyses/%Y/%m/%d/', verbose_name='File analyses')),
                ('dta', models.DateTimeField(blank=True, null=True, verbose_name='Date/time analyses')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
                ('equipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Equipment', verbose_name='Equipment')),
                ('method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Method', verbose_name='Method')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.AnalysisParameter', verbose_name='Analysis parameter')),
                ('researcher', models.ManyToManyField(to='app.Researcher', verbose_name='Reseacher(s)')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Sample', verbose_name='Sample')),
            ],
            options={
                'verbose_name': 'Sample analysis',
                'verbose_name_plural': 'Analysis of samples',
            },
        ),
        migrations.CreateModel(
            name='Seq_result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to='files/seqres/%Y/%m/%d/', verbose_name='File with result')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
                ('ampl', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Amplicon', verbose_name='Amplicon')),
                ('plathorm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Equipment', verbose_name='Plathorm seq')),
            ],
            options={
                'verbose_name': 'Sequencing result',
                'verbose_name_plural': 'Sequencing results',
            },
        ),
        migrations.CreateModel(
            name='Seq_run',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(help_text='Run date', verbose_name='Date')),
                ('descr', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Organisation', verbose_name='Organisation')),
                ('research', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Researcher', verbose_name='Research')),
            ],
            options={
                'verbose_name': 'Sequencing run',
                'verbose_name_plural': 'Sequencing runs',
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Station name')),
                ('gps', models.CharField(help_text='pls input unique geo coordinates', max_length=100, unique=True, verbose_name='Geographical coordinates')),
                ('depth', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Depth')),
                ('abbreviation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Abbreviation')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Station',
                'verbose_name_plural': 'Stations',
            },
        ),
        migrations.CreateModel(
            name='TaxBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name database, ex:NCBI', max_length=50, verbose_name='DB name')),
                ('basen', models.CharField(help_text='db name for connect', max_length=50, verbose_name='name')),
                ('basev', models.CharField(max_length=15, verbose_name='database version')),
                ('base_url', models.URLField(verbose_name='Database URL')),
                ('base_user', models.CharField(help_text='user for connect', max_length=20, verbose_name='db user')),
                ('base_pass', models.CharField(help_text='password for connect', max_length=40, verbose_name='Password')),
                ('base_port', models.PositiveIntegerField(verbose_name='Port db')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Taxonomy Base',
                'verbose_name_plural': 'Taxonomy Bases',
            },
        ),
        migrations.CreateModel(
            name='TaxIDs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxID', models.IntegerField(verbose_name='TaxID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.TaxBase', verbose_name='Taxonomy Base')),
            ],
            options={
                'verbose_name': 'TaxIDs',
                'verbose_name_plural': 'TaxIDs',
            },
        ),
        migrations.CreateModel(
            name='TypeEquipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='input type of equipment or consumables', max_length=50, unique=True, verbose_name='Type of equipment or consumables')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
                ('depends', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.TypeEquipment', verbose_name='Depends on')),
            ],
            options={
                'verbose_name': 'Type of equipment or consumables',
                'verbose_name_plural': 'Types of equipment or consumables',
            },
        ),
        migrations.CreateModel(
            name='TypeResearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='input type of research', max_length=50, unique=True, verbose_name='Type of research')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Type of research',
                'verbose_name_plural': 'Types of research',
            },
        ),
        migrations.CreateModel(
            name='TypeSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='input type of sample', max_length=50, unique=True, verbose_name='Type of sample')),
                ('descr', models.CharField(blank=True, max_length=512, null=True, verbose_name='Description')),
                ('value', models.CharField(blank=True, help_text='merim v mm3, litrah, grammah ili kg', max_length=30, null=True, verbose_name='V 4em merim')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Type of sample',
                'verbose_name_plural': 'Types of sample',
            },
        ),
        migrations.CreateModel(
            name='WaterObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name of water object')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
            ],
            options={
                'verbose_name': 'Water object',
                'verbose_name_plural': 'Water objects',
            },
        ),
        migrations.CreateModel(
            name='WaterZone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name zone')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date time added')),
                ('water_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.WaterObject', verbose_name='Water object')),
            ],
            options={
                'verbose_name': 'Water zone',
                'verbose_name_plural': 'Water zone',
            },
        ),
        migrations.AddField(
            model_name='station',
            name='wo',
            field=models.ForeignKey(help_text='pls select water object', on_delete=django.db.models.deletion.CASCADE, to='app.WaterObject', verbose_name='Water object'),
        ),
        migrations.AddField(
            model_name='station',
            name='wz',
            field=models.ForeignKey(blank=True, help_text='pls select water zone, if need', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.WaterZone', verbose_name='Water zone'),
        ),
        migrations.AddField(
            model_name='seq_result',
            name='run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Seq_run', verbose_name='Sequencing run'),
        ),
        migrations.AddField(
            model_name='sample',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Station', verbose_name='Station'),
        ),
        migrations.AddField(
            model_name='sample',
            name='takenb',
            field=models.ManyToManyField(to='app.Researcher', verbose_name='Taken by...'),
        ),
        migrations.AddField(
            model_name='sample',
            name='takene',
            field=models.ManyToManyField(to='app.Equipment', verbose_name='Taken equipment'),
        ),
        migrations.AddField(
            model_name='sample',
            name='type_sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.TypeSample', verbose_name='Type of sample'),
        ),
        migrations.AddField(
            model_name='publication',
            name='authors',
            field=models.ManyToManyField(to='app.Researcher', verbose_name='Researcher(s)'),
        ),
        migrations.AddField(
            model_name='pipeline',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ProgramPipe', verbose_name='Program Pipeline'),
        ),
        migrations.AddField(
            model_name='otu',
            name='pipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Pipeline', verbose_name='Pipeline'),
        ),
        migrations.AddField(
            model_name='otu',
            name='taxID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.TaxIDs', verbose_name='TaxIDs'),
        ),
        migrations.AddField(
            model_name='method',
            name='ref',
            field=models.ManyToManyField(to='app.Publication', verbose_name='Refers to'),
        ),
        migrations.AddField(
            model_name='method',
            name='used',
            field=models.ManyToManyField(to='app.Equipment', verbose_name='Used equipment'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.TypeEquipment', verbose_name='Type of equipment or consumables'),
        ),
        migrations.AddField(
            model_name='analysisparameter',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.TypeResearch', verbose_name='Type of research'),
        ),
        migrations.AddField(
            model_name='amplicon',
            name='gene',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Gene', verbose_name='Gene'),
        ),
        migrations.AddField(
            model_name='amplicon',
            name='method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Method', verbose_name='Method analyses'),
        ),
        migrations.AddField(
            model_name='amplicon',
            name='pipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Pipeline', verbose_name='Pipeline'),
        ),
        migrations.AddField(
            model_name='amplicon',
            name='research',
            field=models.ManyToManyField(help_text='m:n or 1:n???', to='app.Researcher', verbose_name='Researcher'),
        ),
        migrations.AddField(
            model_name='amplicon',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Sample', verbose_name='Sample'),
        ),
    ]
